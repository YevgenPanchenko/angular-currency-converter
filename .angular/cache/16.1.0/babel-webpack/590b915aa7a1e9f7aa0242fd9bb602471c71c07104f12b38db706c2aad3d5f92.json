{"ast":null,"code":"import _asyncToGenerator from \"D:/Web Development/projects/ANGULAR/converter/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// import { Component, OnInit } from '@angular/core';\nimport { __decorate } from \"tslib\";\n// @Component({\n//   selector: 'app-currency-converter',\n//   templateUrl: './currency-converter.component.html',\n//   styleUrls: ['./currency-converter.component.css'],\n// })\n// export class CurrencyConverterComponent implements OnInit {\n//   amount: number = 0;\n//   fromCurrency: string = '';\n//   toCurrency: string = '';\n//   convertedAmount: number = 0;\n//   rates: any = {};\n//   ngOnInit(): void {\n//     this.getCurrencies();\n//   }\n//   async getCurrencies(): Promise<void> {\n//     const response = await fetch(\n//       'https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json'\n//     );\n//     const data = await response.json();\n//     data.forEach((currency: any) => {\n//       this.rates[currency.cc] = currency.rate;\n//     });\n//     this.rates.UAH = 1.0;\n//   }\n//   convertValue(): void {\n//     const inputValue = parseFloat(this.amount.toString());\n//     let convertedValue;\n//     if (this.fromCurrency === this.toCurrency) {\n//       convertedValue = inputValue;\n//     } else if (this.fromCurrency === 'UAH') {\n//       convertedValue = inputValue / this.rates[this.toCurrency];\n//     } else if (this.toCurrency === 'UAH') {\n//       convertedValue = inputValue * this.rates[this.fromCurrency];\n//     } else {\n//       convertedValue =\n//         (inputValue * this.rates[this.fromCurrency]) /\n//         this.rates[this.toCurrency];\n//     }\n//     this.convertedAmount = parseFloat(convertedValue.toFixed(2));\n//   }\n//   convertBack(): void {\n//     const inputValue = parseFloat(this.convertedAmount.toString());\n//     let convertedValue;\n//     if (this.fromCurrency === this.toCurrency) {\n//       convertedValue = inputValue;\n//     } else if (this.fromCurrency === 'UAH') {\n//       convertedValue = inputValue / this.rates[this.toCurrency];\n//     } else if (this.toCurrency === 'UAH') {\n//       convertedValue = inputValue * this.rates[this.fromCurrency];\n//     } else {\n//       convertedValue =\n//         (inputValue * this.rates[this.toCurrency]) /\n//         this.rates[this.fromCurrency];\n//     }\n//     this.amount = parseFloat(convertedValue.toFixed(2));\n//   }\n// }\nimport { Component } from '@angular/core';\nexport let CurrencyConverterComponent = class CurrencyConverterComponent {\n  constructor() {\n    this.amount = 0;\n    this.fromCurrency = '';\n    this.toCurrency = '';\n    this.convertedAmount = 0;\n    this.rates = {};\n  }\n  ngOnInit() {\n    this.getCurrencies();\n  }\n  getCurrencies() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const response = yield fetch('https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json');\n      const data = yield response.json();\n      data.forEach(currency => {\n        _this.rates[currency.cc] = currency.rate;\n      });\n      _this.rates[\"UAH\"] = 1.0;\n    })();\n  }\n  convertValue() {\n    const inputValue = parseFloat(String(this.amount));\n    let convertedValue;\n    if (this.fromCurrency === this.toCurrency) {\n      convertedValue = inputValue;\n    } else if (this.fromCurrency === 'UAH') {\n      convertedValue = inputValue / this.rates[this.toCurrency];\n    } else if (this.toCurrency === 'UAH') {\n      convertedValue = inputValue * this.rates[this.fromCurrency];\n    } else {\n      convertedValue = inputValue * this.rates[this.fromCurrency] / this.rates[this.toCurrency];\n    }\n    this.convertedAmount = parseFloat(convertedValue.toFixed(2));\n  }\n  convertBack() {\n    const inputValue = parseFloat(String(this.convertedAmount));\n    let convertedValue;\n    if (this.fromCurrency === this.toCurrency) {\n      convertedValue = inputValue;\n    } else if (this.fromCurrency === 'UAH') {\n      convertedValue = inputValue / this.rates[this.toCurrency];\n    } else if (this.toCurrency === 'UAH') {\n      convertedValue = inputValue * this.rates[this.fromCurrency];\n    } else {\n      convertedValue = inputValue * this.rates[this.toCurrency] / this.rates[this.fromCurrency];\n    }\n    this.amount = parseFloat(convertedValue.toFixed(2));\n  }\n};\nCurrencyConverterComponent = __decorate([Component({\n  selector: 'app-currency-converter',\n  templateUrl: './currency-converter.component.html',\n  styleUrls: ['./currency-converter.component.css']\n})], CurrencyConverterComponent);","map":{"version":3,"names":["Component","CurrencyConverterComponent","constructor","amount","fromCurrency","toCurrency","convertedAmount","rates","ngOnInit","getCurrencies","_this","_asyncToGenerator","response","fetch","data","json","forEach","currency","cc","rate","convertValue","inputValue","parseFloat","String","convertedValue","toFixed","convertBack","__decorate","selector","templateUrl","styleUrls"],"sources":["D:\\Web Development\\projects\\ANGULAR\\converter\\src\\app\\currency-converter\\currency-converter.component.ts"],"sourcesContent":["// import { Component, OnInit } from '@angular/core';\r\n\r\n// @Component({\r\n//   selector: 'app-currency-converter',\r\n//   templateUrl: './currency-converter.component.html',\r\n//   styleUrls: ['./currency-converter.component.css'],\r\n// })\r\n// export class CurrencyConverterComponent implements OnInit {\r\n//   amount: number = 0;\r\n//   fromCurrency: string = '';\r\n//   toCurrency: string = '';\r\n//   convertedAmount: number = 0;\r\n//   rates: any = {};\r\n\r\n//   ngOnInit(): void {\r\n//     this.getCurrencies();\r\n//   }\r\n\r\n//   async getCurrencies(): Promise<void> {\r\n//     const response = await fetch(\r\n//       'https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json'\r\n//     );\r\n//     const data = await response.json();\r\n\r\n//     data.forEach((currency: any) => {\r\n//       this.rates[currency.cc] = currency.rate;\r\n//     });\r\n\r\n//     this.rates.UAH = 1.0;\r\n//   }\r\n\r\n//   convertValue(): void {\r\n//     const inputValue = parseFloat(this.amount.toString());\r\n\r\n//     let convertedValue;\r\n\r\n//     if (this.fromCurrency === this.toCurrency) {\r\n//       convertedValue = inputValue;\r\n//     } else if (this.fromCurrency === 'UAH') {\r\n//       convertedValue = inputValue / this.rates[this.toCurrency];\r\n//     } else if (this.toCurrency === 'UAH') {\r\n//       convertedValue = inputValue * this.rates[this.fromCurrency];\r\n//     } else {\r\n//       convertedValue =\r\n//         (inputValue * this.rates[this.fromCurrency]) /\r\n//         this.rates[this.toCurrency];\r\n//     }\r\n\r\n//     this.convertedAmount = parseFloat(convertedValue.toFixed(2));\r\n//   }\r\n\r\n//   convertBack(): void {\r\n//     const inputValue = parseFloat(this.convertedAmount.toString());\r\n\r\n//     let convertedValue;\r\n\r\n//     if (this.fromCurrency === this.toCurrency) {\r\n//       convertedValue = inputValue;\r\n//     } else if (this.fromCurrency === 'UAH') {\r\n//       convertedValue = inputValue / this.rates[this.toCurrency];\r\n//     } else if (this.toCurrency === 'UAH') {\r\n//       convertedValue = inputValue * this.rates[this.fromCurrency];\r\n//     } else {\r\n//       convertedValue =\r\n//         (inputValue * this.rates[this.toCurrency]) /\r\n//         this.rates[this.fromCurrency];\r\n//     }\r\n\r\n//     this.amount = parseFloat(convertedValue.toFixed(2));\r\n//   }\r\n  \r\n// }\r\n\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\ninterface Currency {\r\n  cc: string;\r\n  rate: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-currency-converter',\r\n  templateUrl: './currency-converter.component.html',\r\n  styleUrls: ['./currency-converter.component.css'],\r\n})\r\nexport class CurrencyConverterComponent implements OnInit {\r\n  amount = 0;\r\n  fromCurrency = '';\r\n  toCurrency = '';\r\n  convertedAmount = 0;\r\n  rates: { [key: string]: number } = {};\r\n\r\n  ngOnInit(): void {\r\n    this.getCurrencies();\r\n  }\r\n\r\n  async getCurrencies(): Promise<void> {\r\n    const response = await fetch(\r\n      'https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json'\r\n    );\r\n    const data: Currency[] = await response.json();\r\n\r\n    data.forEach((currency) => {\r\n      this.rates[currency.cc] = currency.rate;\r\n    });\r\n\r\n    this.rates[\"UAH\"] = 1.0;\r\n  }\r\n\r\n  convertValue(): void {\r\n    const inputValue = parseFloat(String(this.amount));\r\n    let convertedValue: number;\r\n\r\n    if (this.fromCurrency === this.toCurrency) {\r\n      convertedValue = inputValue;\r\n    } else if (this.fromCurrency === 'UAH') {\r\n      convertedValue = inputValue / this.rates[this.toCurrency];\r\n    } else if (this.toCurrency === 'UAH') {\r\n      convertedValue = inputValue * this.rates[this.fromCurrency];\r\n    } else {\r\n      convertedValue =\r\n        (inputValue * this.rates[this.fromCurrency]) /\r\n        this.rates[this.toCurrency];\r\n    }\r\n\r\n    this.convertedAmount = parseFloat(convertedValue.toFixed(2));\r\n  }\r\n\r\n  convertBack(): void {\r\n    const inputValue = parseFloat(String(this.convertedAmount));\r\n    let convertedValue: number;\r\n\r\n    if (this.fromCurrency === this.toCurrency) {\r\n      convertedValue = inputValue;\r\n    } else if (this.fromCurrency === 'UAH') {\r\n      convertedValue = inputValue / this.rates[this.toCurrency];\r\n    } else if (this.toCurrency === 'UAH') {\r\n      convertedValue = inputValue * this.rates[this.fromCurrency];\r\n    } else {\r\n      convertedValue =\r\n        (inputValue * this.rates[this.toCurrency]) /\r\n        this.rates[this.fromCurrency];\r\n    }\r\n\r\n    this.amount = parseFloat(convertedValue.toFixed(2));\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}